
lostmodel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000a18  00000aac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800102  00800102  00000aae  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000aae  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000ac0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b92  00000000  00000000  00000b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000314  00000000  00000000  000016da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000367  00000000  00000000  000019ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000108  00000000  00000000  00001d58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003db  00000000  00000000  00001e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000578  00000000  00000000  0000223b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  000027b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	59 c0       	rjmp	.+178    	; 0xb4 <__ctors_end>
   2:	73 c0       	rjmp	.+230    	; 0xea <__bad_interrupt>
   4:	72 c0       	rjmp	.+228    	; 0xea <__bad_interrupt>
   6:	71 c0       	rjmp	.+226    	; 0xea <__bad_interrupt>
   8:	70 c0       	rjmp	.+224    	; 0xea <__bad_interrupt>
   a:	6f c0       	rjmp	.+222    	; 0xea <__bad_interrupt>
   c:	6e c0       	rjmp	.+220    	; 0xea <__bad_interrupt>
   e:	78 c0       	rjmp	.+240    	; 0x100 <__vector_7>
  10:	6c c0       	rjmp	.+216    	; 0xea <__bad_interrupt>
  12:	6b c0       	rjmp	.+214    	; 0xea <__bad_interrupt>
  14:	b4 c1       	rjmp	.+872    	; 0x37e <__vector_10>
  16:	69 c0       	rjmp	.+210    	; 0xea <__bad_interrupt>
  18:	68 c0       	rjmp	.+208    	; 0xea <__bad_interrupt>
  1a:	67 c0       	rjmp	.+206    	; 0xea <__bad_interrupt>
  1c:	66 c0       	rjmp	.+204    	; 0xea <__bad_interrupt>
  1e:	65 c0       	rjmp	.+202    	; 0xea <__bad_interrupt>
  20:	64 c0       	rjmp	.+200    	; 0xea <__bad_interrupt>
  22:	63 c0       	rjmp	.+198    	; 0xea <__bad_interrupt>
  24:	62 c0       	rjmp	.+196    	; 0xea <__bad_interrupt>
  26:	61 c0       	rjmp	.+194    	; 0xea <__bad_interrupt>
  28:	60 c0       	rjmp	.+192    	; 0xea <__bad_interrupt>
  2a:	5f c0       	rjmp	.+190    	; 0xea <__bad_interrupt>
  2c:	5e c0       	rjmp	.+188    	; 0xea <__bad_interrupt>
  2e:	5d c0       	rjmp	.+186    	; 0xea <__bad_interrupt>
  30:	5c c0       	rjmp	.+184    	; 0xea <__bad_interrupt>
  32:	5b c0       	rjmp	.+182    	; 0xea <__bad_interrupt>
  34:	ab c0       	rjmp	.+342    	; 0x18c <__vector_7+0x8c>
  36:	bb c0       	rjmp	.+374    	; 0x1ae <__vector_7+0xae>
  38:	d1 c0       	rjmp	.+418    	; 0x1dc <__vector_7+0xdc>
  3a:	e1 c0       	rjmp	.+450    	; 0x1fe <__vector_7+0xfe>
  3c:	f1 c0       	rjmp	.+482    	; 0x220 <__vector_7+0x120>
  3e:	01 c1       	rjmp	.+514    	; 0x242 <__vector_7+0x142>
  40:	1f c1       	rjmp	.+574    	; 0x280 <__vector_7+0x180>
  42:	56 c1       	rjmp	.+684    	; 0x2f0 <__vector_7+0x1f0>
  44:	65 c1       	rjmp	.+714    	; 0x310 <__vector_7+0x210>
  46:	77 c3       	rjmp	.+1774   	; 0x736 <__stack+0x237>
  48:	aa c3       	rjmp	.+1876   	; 0x79e <__stack+0x29f>
  4a:	b2 c3       	rjmp	.+1892   	; 0x7b0 <__stack+0x2b1>
  4c:	ca c3       	rjmp	.+1940   	; 0x7e2 <__stack+0x2e3>
  4e:	ef c3       	rjmp	.+2014   	; 0x82e <__stack+0x32f>
  50:	05 c4       	rjmp	.+2058   	; 0x85c <__stack+0x35d>
  52:	2c c4       	rjmp	.+2136   	; 0x8ac <__stack+0x3ad>
  54:	35 c4       	rjmp	.+2154   	; 0x8c0 <__stack+0x3c1>

00000056 <__trampolines_end>:
  56:	4f 4b       	sbci	r20, 0xBF	; 191
  58:	20 00       	.word	0x0020	; ????

0000005a <_ZZ4mainE3__c_7>:
  5a:	49 3f 20 00                                         I? .

0000005e <_ZZ4mainE3__c_6>:
  5e:	4e 3f 20 00                                         N? .

00000062 <_ZZ4mainE3__c_5>:
  62:	50 20 20 00                                         P  .

00000066 <_ZZ4mainE3__c_4>:
  66:	57 20 20 00                                         W  .

0000006a <_ZZ4mainE3__c_3>:
  6a:	4c 4f 53 54 20 00                                   LOST .

00000070 <_ZZ4mainE3__c_2>:
  70:	4c 4f 53 54 20 00                                   LOST .

00000076 <_ZZ4mainE3__c_1>:
  76:	52 20 49 20 00                                      R I .

0000007b <_ZZ4mainE3__c_0>:
  7b:	52 20 4e 20 00                                      R N .

00000080 <_ZZ4mainE3__c>:
  80:	45 20 20 20 00                                      E   .

00000085 <_ZL10morseTable>:
  85:	f3 00 d5 b2 bf af a7 a3 a1 a0 b0 b8 bc be 00 00     ................
  95:	00 b1 00 cc 00 48 90 94 70 20 84 78 80 40 8e 74     .....H..p .x.@.t
  a5:	88 58 50 7c 8c 9a 68 60 30 64 82 6c 92 96 98        .XP|..h`0d.l...

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d4 e0       	ldi	r29, 0x04	; 4
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e8 e1       	ldi	r30, 0x18	; 24
  c8:	fa e0       	ldi	r31, 0x0A	; 10
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a2 30       	cpi	r26, 0x02	; 2
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a2 e0       	ldi	r26, 0x02	; 2
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	ae 31       	cpi	r26, 0x1E	; 30
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	9d d1       	rcall	.+826    	; 0x422 <main>
  e8:	95 c4       	rjmp	.+2346   	; 0xa14 <_exit>

000000ea <__bad_interrupt>:
  ea:	8a cf       	rjmp	.-236    	; 0x0 <__vectors>

000000ec <_Z8beeperOnv>:
#include <stdlib.h> // abs()
#include "lostmodel.h"

void beeperOn()
{
  LED_ON(3);
  ec:	44 9a       	sbi	0x08, 4	; 8

  // PWM ON
  TCCR0A |= (0b10<<COM0B0);
  ee:	84 b5       	in	r24, 0x24	; 36
  f0:	80 62       	ori	r24, 0x20	; 32
  f2:	84 bd       	out	0x24, r24	; 36
  f4:	08 95       	ret

000000f6 <_Z9beeperOffv>:
}

void beeperOff()
{
  LED_OFF(3);
  f6:	44 98       	cbi	0x08, 4	; 8

  TCCR0A &= ~(0b11<<COM0B0);
  f8:	84 b5       	in	r24, 0x24	; 36
  fa:	8f 7c       	andi	r24, 0xCF	; 207
  fc:	84 bd       	out	0x24, r24	; 36
  fe:	08 95       	ret

00000100 <__vector_7>:
volatile int sigPulseWidth;
volatile unsigned int pulseTimeoutCounter = 0;
volatile bool runningIndicatorEnabled = false;
// this ISR called every 250uS
ISR(TIMER2_COMPA_vect)
{
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	2f 93       	push	r18
 10c:	3f 93       	push	r19
 10e:	4f 93       	push	r20
 110:	5f 93       	push	r21
 112:	6f 93       	push	r22
 114:	7f 93       	push	r23
 116:	8f 93       	push	r24
 118:	9f 93       	push	r25
 11a:	af 93       	push	r26
 11c:	bf 93       	push	r27
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	ef 93       	push	r30
 124:	ff 93       	push	r31
  if (pulseTimeoutCounter++ > PULSE_TIMEOUT)
 126:	80 91 03 01 	lds	r24, 0x0103
 12a:	90 91 04 01 	lds	r25, 0x0104
 12e:	9c 01       	movw	r18, r24
 130:	2f 5f       	subi	r18, 0xFF	; 255
 132:	3f 4f       	sbci	r19, 0xFF	; 255
 134:	30 93 04 01 	sts	0x0104, r19
 138:	20 93 03 01 	sts	0x0103, r18
 13c:	8d 35       	cpi	r24, 0x5D	; 93
 13e:	91 05       	cpc	r25, r1
 140:	78 f0       	brcs	.+30     	; 0x160 <__vector_7+0x60>
  {
    sigPulseWidth = PULSE_INVALID;  // signal no pulse detected
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	9f ef       	ldi	r25, 0xFF	; 255
 146:	90 93 06 01 	sts	0x0106, r25
 14a:	80 93 05 01 	sts	0x0105, r24
    pulseTimeoutCounter--; // prevent counter incrementing further
 14e:	80 91 03 01 	lds	r24, 0x0103
 152:	90 91 04 01 	lds	r25, 0x0104
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	90 93 04 01 	sts	0x0104, r25
 15c:	80 93 03 01 	sts	0x0103, r24
  }

  static unsigned char count = 0;
  if ((count++ % 4) == 3)  // call the Morse state machine every 1 millisecond 
 160:	80 91 1d 01 	lds	r24, 0x011D
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	98 0f       	add	r25, r24
 168:	90 93 1d 01 	sts	0x011D, r25
 16c:	83 70       	andi	r24, 0x03	; 3
 16e:	83 30       	cpi	r24, 0x03	; 3
 170:	09 f0       	breq	.+2      	; 0x174 <__vector_7+0x74>
 172:	ce c0       	rjmp	.+412    	; 0x310 <__vector_7+0x210>
  static unsigned char bitCount;
  static unsigned char letterBits;
  static unsigned char charIndex;
  static char thisChar;

  switch (morseState)
 174:	e0 91 00 01 	lds	r30, 0x0100
 178:	f0 91 01 01 	lds	r31, 0x0101
 17c:	31 97       	sbiw	r30, 0x01	; 1
 17e:	e9 30       	cpi	r30, 0x09	; 9
 180:	f1 05       	cpc	r31, r1
 182:	08 f0       	brcs	.+2      	; 0x186 <__vector_7+0x86>
 184:	bf c0       	rjmp	.+382    	; 0x304 <__vector_7+0x204>
 186:	e6 5e       	subi	r30, 0xE6	; 230
 188:	ff 4f       	sbci	r31, 0xFF	; 255
 18a:	09 94       	ijmp
  {
    case DIT:
      if (timer == 0)
 18c:	c0 91 19 01 	lds	r28, 0x0119
 190:	d0 91 1a 01 	lds	r29, 0x011A
 194:	20 97       	sbiw	r28, 0x00	; 0
 196:	09 f4       	brne	.+2      	; 0x19a <__vector_7+0x9a>
        beeperOn();
 198:	a9 df       	rcall	.-174    	; 0xec <_Z8beeperOnv>
      if (++timer > DITLENGTH) 
 19a:	21 96       	adiw	r28, 0x01	; 1
 19c:	d0 93 1a 01 	sts	0x011A, r29
 1a0:	c0 93 19 01 	sts	0x0119, r28
 1a4:	cb 35       	cpi	r28, 0x5B	; 91
 1a6:	d1 05       	cpc	r29, r1
 1a8:	08 f4       	brcc	.+2      	; 0x1ac <__vector_7+0xac>
 1aa:	b2 c0       	rjmp	.+356    	; 0x310 <__vector_7+0x210>
 1ac:	10 c0       	rjmp	.+32     	; 0x1ce <__vector_7+0xce>
        morseState = BITGAP;
      }
      break;

    case DAH:
      if (timer == 0)
 1ae:	c0 91 19 01 	lds	r28, 0x0119
 1b2:	d0 91 1a 01 	lds	r29, 0x011A
 1b6:	20 97       	sbiw	r28, 0x00	; 0
 1b8:	09 f4       	brne	.+2      	; 0x1bc <__vector_7+0xbc>
        beeperOn();
 1ba:	98 df       	rcall	.-208    	; 0xec <_Z8beeperOnv>
      if (++timer > DITLENGTH * 3)
 1bc:	21 96       	adiw	r28, 0x01	; 1
 1be:	d0 93 1a 01 	sts	0x011A, r29
 1c2:	c0 93 19 01 	sts	0x0119, r28
 1c6:	cf 30       	cpi	r28, 0x0F	; 15
 1c8:	d1 40       	sbci	r29, 0x01	; 1
 1ca:	08 f4       	brcc	.+2      	; 0x1ce <__vector_7+0xce>
 1cc:	a1 c0       	rjmp	.+322    	; 0x310 <__vector_7+0x210>
      {
        timer = 0;
 1ce:	10 92 1a 01 	sts	0x011A, r1
 1d2:	10 92 19 01 	sts	0x0119, r1
        morseState = BITGAP;
 1d6:	83 e0       	ldi	r24, 0x03	; 3
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	96 c0       	rjmp	.+300    	; 0x308 <__vector_7+0x208>
      }
      break;

    case BITGAP:
      if (timer == 0) 
 1dc:	c0 91 19 01 	lds	r28, 0x0119
 1e0:	d0 91 1a 01 	lds	r29, 0x011A
 1e4:	20 97       	sbiw	r28, 0x00	; 0
 1e6:	09 f4       	brne	.+2      	; 0x1ea <__vector_7+0xea>
        beeperOff();
 1e8:	86 df       	rcall	.-244    	; 0xf6 <_Z9beeperOffv>
      if (++timer > DITLENGTH) morseState = NEXTBIT;
 1ea:	21 96       	adiw	r28, 0x01	; 1
 1ec:	d0 93 1a 01 	sts	0x011A, r29
 1f0:	c0 93 19 01 	sts	0x0119, r28
 1f4:	cb 35       	cpi	r28, 0x5B	; 91
 1f6:	d1 05       	cpc	r29, r1
 1f8:	08 f4       	brcc	.+2      	; 0x1fc <__vector_7+0xfc>
 1fa:	8a c0       	rjmp	.+276    	; 0x310 <__vector_7+0x210>
 1fc:	76 c0       	rjmp	.+236    	; 0x2ea <__vector_7+0x1ea>
      break;

    case LETTERGAP:
      if (timer == 0) 
 1fe:	c0 91 19 01 	lds	r28, 0x0119
 202:	d0 91 1a 01 	lds	r29, 0x011A
 206:	20 97       	sbiw	r28, 0x00	; 0
 208:	09 f4       	brne	.+2      	; 0x20c <__vector_7+0x10c>
        beeperOff();
 20a:	75 df       	rcall	.-278    	; 0xf6 <_Z9beeperOffv>
      if (++timer > DITLENGTH * 2) morseState = NEXTCHAR;
 20c:	21 96       	adiw	r28, 0x01	; 1
 20e:	d0 93 1a 01 	sts	0x011A, r29
 212:	c0 93 19 01 	sts	0x0119, r28
 216:	c5 3b       	cpi	r28, 0xB5	; 181
 218:	d1 05       	cpc	r29, r1
 21a:	08 f4       	brcc	.+2      	; 0x21e <__vector_7+0x11e>
 21c:	79 c0       	rjmp	.+242    	; 0x310 <__vector_7+0x210>
 21e:	6f c0       	rjmp	.+222    	; 0x2fe <__vector_7+0x1fe>
      break;

    case SPACE:
      if (timer == 0) 
 220:	c0 91 19 01 	lds	r28, 0x0119
 224:	d0 91 1a 01 	lds	r29, 0x011A
 228:	20 97       	sbiw	r28, 0x00	; 0
 22a:	09 f4       	brne	.+2      	; 0x22e <__vector_7+0x12e>
        beeperOff();
 22c:	64 df       	rcall	.-312    	; 0xf6 <_Z9beeperOffv>
      if (++timer > DITLENGTH * 6) morseState = NEXTCHAR;
 22e:	21 96       	adiw	r28, 0x01	; 1
 230:	d0 93 1a 01 	sts	0x011A, r29
 234:	c0 93 19 01 	sts	0x0119, r28
 238:	cd 31       	cpi	r28, 0x1D	; 29
 23a:	d2 40       	sbci	r29, 0x02	; 2
 23c:	08 f4       	brcc	.+2      	; 0x240 <__vector_7+0x140>
 23e:	68 c0       	rjmp	.+208    	; 0x310 <__vector_7+0x210>
 240:	5e c0       	rjmp	.+188    	; 0x2fe <__vector_7+0x1fe>
      break;

    case NEXTBIT:

      timer = 0;
 242:	10 92 1a 01 	sts	0x011A, r1
 246:	10 92 19 01 	sts	0x0119, r1

      if (letterBits & 0b10000000)
 24a:	20 91 18 01 	lds	r18, 0x0118
 24e:	27 ff       	sbrs	r18, 7
 250:	03 c0       	rjmp	.+6      	; 0x258 <__vector_7+0x158>
        morseState = DAH;
 252:	82 e0       	ldi	r24, 0x02	; 2
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <__vector_7+0x15c>
      else
        morseState = DIT;
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	90 93 01 01 	sts	0x0101, r25
 260:	80 93 00 01 	sts	0x0100, r24

      letterBits <<= 1; // shift bits left 1 position
 264:	22 0f       	add	r18, r18
 266:	20 93 18 01 	sts	0x0118, r18
      if (bitCount-- == 0)
 26a:	80 91 17 01 	lds	r24, 0x0117
 26e:	9f ef       	ldi	r25, 0xFF	; 255
 270:	98 0f       	add	r25, r24
 272:	90 93 17 01 	sts	0x0117, r25
 276:	81 11       	cpse	r24, r1
 278:	4b c0       	rjmp	.+150    	; 0x310 <__vector_7+0x210>
        morseState = LETTERGAP;
 27a:	84 e0       	ldi	r24, 0x04	; 4
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	44 c0       	rjmp	.+136    	; 0x308 <__vector_7+0x208>

      break;

    case NEXTCHAR:

      thisChar = pgm_read_byte(&morseString[charIndex++]);
 280:	e0 91 07 01 	lds	r30, 0x0107
 284:	f0 91 08 01 	lds	r31, 0x0108
 288:	80 91 16 01 	lds	r24, 0x0116
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	98 0f       	add	r25, r24
 290:	90 93 16 01 	sts	0x0116, r25
 294:	e8 0f       	add	r30, r24
 296:	f1 1d       	adc	r31, r1
 298:	e4 91       	lpm	r30, Z
 29a:	e0 93 15 01 	sts	0x0115, r30

      if (thisChar == ' ') 
 29e:	e0 32       	cpi	r30, 0x20	; 32
 2a0:	39 f4       	brne	.+14     	; 0x2b0 <__vector_7+0x1b0>
      {
        timer = 0;
 2a2:	10 92 1a 01 	sts	0x011A, r1
 2a6:	10 92 19 01 	sts	0x0119, r1
        morseState = SPACE;
 2aa:	85 e0       	ldi	r24, 0x05	; 5
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	2c c0       	rjmp	.+88     	; 0x308 <__vector_7+0x208>
      }
      else if ( (thisChar == '\0') || (thisChar < ',') || (thisChar > 'Z') ) // end of string or invalid character?  
 2b0:	84 ed       	ldi	r24, 0xD4	; 212
 2b2:	8e 0f       	add	r24, r30
 2b4:	8f 32       	cpi	r24, 0x2F	; 47
 2b6:	30 f5       	brcc	.+76     	; 0x304 <__vector_7+0x204>
        morseState = STOP;
      else
      {
        letterBits = pgm_read_byte(&morseTable[thisChar-44]);
 2b8:	ff 27       	eor	r31, r31
 2ba:	e7 fd       	sbrc	r30, 7
 2bc:	f0 95       	com	r31
 2be:	e7 5a       	subi	r30, 0xA7	; 167
 2c0:	ff 4f       	sbci	r31, 0xFF	; 255
 2c2:	e4 91       	lpm	r30, Z
        bitCount = (letterBits >> 5);
 2c4:	8e 2f       	mov	r24, r30
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	25 e0       	ldi	r18, 0x05	; 5
 2ca:	95 95       	asr	r25
 2cc:	87 95       	ror	r24
 2ce:	2a 95       	dec	r18
 2d0:	e1 f7       	brne	.-8      	; 0x2ca <__vector_7+0x1ca>
 2d2:	80 93 17 01 	sts	0x0117, r24
        if (bitCount < 6)
 2d6:	86 30       	cpi	r24, 0x06	; 6
 2d8:	20 f4       	brcc	.+8      	; 0x2e2 <__vector_7+0x1e2>
          letterBits <<= 3;
 2da:	ee 0f       	add	r30, r30
 2dc:	ee 0f       	add	r30, r30
 2de:	ee 0f       	add	r30, r30
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <__vector_7+0x1e6>
        else
          letterBits <<= 2;
 2e2:	ee 0f       	add	r30, r30
 2e4:	ee 0f       	add	r30, r30
 2e6:	e0 93 18 01 	sts	0x0118, r30

        morseState = NEXTBIT;
 2ea:	86 e0       	ldi	r24, 0x06	; 6
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0c c0       	rjmp	.+24     	; 0x308 <__vector_7+0x208>
      }
      break;


    case START:
      beeperOff();
 2f0:	02 df       	rcall	.-508    	; 0xf6 <_Z9beeperOffv>
      timer = 0;
 2f2:	10 92 1a 01 	sts	0x011A, r1
 2f6:	10 92 19 01 	sts	0x0119, r1
      charIndex = 0;
 2fa:	10 92 16 01 	sts	0x0116, r1
      morseState = NEXTCHAR;
 2fe:	87 e0       	ldi	r24, 0x07	; 7
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	02 c0       	rjmp	.+4      	; 0x308 <__vector_7+0x208>

    case STOP:
      break; // do nothing

    default:
      morseState = STOP;
 304:	89 e0       	ldi	r24, 0x09	; 9
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	90 93 01 01 	sts	0x0101, r25
 30c:	80 93 00 01 	sts	0x0100, r24
  if ((count++ % 4) == 3)  // call the Morse state machine every 1 millisecond 
    morseStateMachine();

  // blink middle (blue) LED briefly, each three seconds to indicate RUNNING state (if so)
  static unsigned int runningIndicatorCount = 0;
  if (runningIndicatorEnabled)
 310:	80 91 02 01 	lds	r24, 0x0102
 314:	88 23       	and	r24, r24
 316:	f9 f0       	breq	.+62     	; 0x356 <__vector_7+0x256>
  {
    if (runningIndicatorCount == 0) LED_ON(2);
 318:	80 91 1b 01 	lds	r24, 0x011B
 31c:	90 91 1c 01 	lds	r25, 0x011C
 320:	00 97       	sbiw	r24, 0x00	; 0
 322:	11 f4       	brne	.+4      	; 0x328 <__vector_7+0x228>
 324:	43 9a       	sbi	0x08, 3	; 8
 326:	04 c0       	rjmp	.+8      	; 0x330 <__vector_7+0x230>
    else if (runningIndicatorCount == (4 * 120)) LED_OFF(2);  // LED on for 120ms
 328:	80 3e       	cpi	r24, 0xE0	; 224
 32a:	91 40       	sbci	r25, 0x01	; 1
 32c:	09 f4       	brne	.+2      	; 0x330 <__vector_7+0x230>
 32e:	43 98       	cbi	0x08, 3	; 8

    if (runningIndicatorCount == (4 * 3000 - 1)) // reset counter at 3 seconds
 330:	80 91 1b 01 	lds	r24, 0x011B
 334:	90 91 1c 01 	lds	r25, 0x011C
 338:	8f 3d       	cpi	r24, 0xDF	; 223
 33a:	2e e2       	ldi	r18, 0x2E	; 46
 33c:	92 07       	cpc	r25, r18
 33e:	29 f4       	brne	.+10     	; 0x34a <__vector_7+0x24a>
      runningIndicatorCount = 0;
 340:	10 92 1c 01 	sts	0x011C, r1
 344:	10 92 1b 01 	sts	0x011B, r1
 348:	07 c0       	rjmp	.+14     	; 0x358 <__vector_7+0x258>
    else
      runningIndicatorCount++;
 34a:	01 96       	adiw	r24, 0x01	; 1
 34c:	90 93 1c 01 	sts	0x011C, r25
 350:	80 93 1b 01 	sts	0x011B, r24
 354:	01 c0       	rjmp	.+2      	; 0x358 <__vector_7+0x258>
  }
  else 
    LED_OFF(2);
 356:	43 98       	cbi	0x08, 3	; 8

}
 358:	ff 91       	pop	r31
 35a:	ef 91       	pop	r30
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	bf 91       	pop	r27
 362:	af 91       	pop	r26
 364:	9f 91       	pop	r25
 366:	8f 91       	pop	r24
 368:	7f 91       	pop	r23
 36a:	6f 91       	pop	r22
 36c:	5f 91       	pop	r21
 36e:	4f 91       	pop	r20
 370:	3f 91       	pop	r19
 372:	2f 91       	pop	r18
 374:	0f 90       	pop	r0
 376:	0f be       	out	0x3f, r0	; 63
 378:	0f 90       	pop	r0
 37a:	1f 90       	pop	r1
 37c:	18 95       	reti

0000037e <__vector_10>:

ISR(TIMER1_CAPT_vect)
{
 37e:	1f 92       	push	r1
 380:	0f 92       	push	r0
 382:	0f b6       	in	r0, 0x3f	; 63
 384:	0f 92       	push	r0
 386:	11 24       	eor	r1, r1
 388:	2f 93       	push	r18
 38a:	3f 93       	push	r19
 38c:	4f 93       	push	r20
 38e:	8f 93       	push	r24
 390:	9f 93       	push	r25
  // an edge detection event has occured on the ICP1(PB0) pin
  unsigned int icr;

  icr = ICR1; // capture counter value as at this edge trigger
 392:	80 91 86 00 	lds	r24, 0x0086
 396:	90 91 87 00 	lds	r25, 0x0087

  if (TCCR1B & (1<<ICES1)) // trigger was high going edge
 39a:	20 91 81 00 	lds	r18, 0x0081
 39e:	26 ff       	sbrs	r18, 6
 3a0:	08 c0       	rjmp	.+16     	; 0x3b2 <__vector_10+0x34>
  {
    TCNT1 = 0;             // reset counter
 3a2:	10 92 85 00 	sts	0x0085, r1
 3a6:	10 92 84 00 	sts	0x0084, r1
    TCCR1B &= ~(1<<ICES1); // set next trigger to low going edge
 3aa:	80 91 81 00 	lds	r24, 0x0081
 3ae:	8f 7b       	andi	r24, 0xBF	; 191
 3b0:	14 c0       	rjmp	.+40     	; 0x3da <__vector_10+0x5c>
  }
  else // trigger was low going edge
  {
    if ((icr > 800) && (icr < 2200)) 
 3b2:	9c 01       	movw	r18, r24
 3b4:	21 52       	subi	r18, 0x21	; 33
 3b6:	33 40       	sbci	r19, 0x03	; 3
 3b8:	27 37       	cpi	r18, 0x77	; 119
 3ba:	35 40       	sbci	r19, 0x05	; 5
 3bc:	28 f4       	brcc	.+10     	; 0x3c8 <__vector_10+0x4a>
    {
      pulseTimeoutCounter = 0;
 3be:	10 92 04 01 	sts	0x0104, r1
 3c2:	10 92 03 01 	sts	0x0103, r1
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <__vector_10+0x4e>
      sigPulseWidth = icr;
    }
    else
    {
      sigPulseWidth = PULSE_INVALID; // invalid pulse width
 3c8:	8f ef       	ldi	r24, 0xFF	; 255
 3ca:	9f ef       	ldi	r25, 0xFF	; 255
 3cc:	90 93 06 01 	sts	0x0106, r25
 3d0:	80 93 05 01 	sts	0x0105, r24
    }
    TCCR1B |= (1<<ICES1); // set next trigger to high going edge
 3d4:	80 91 81 00 	lds	r24, 0x0081
 3d8:	80 64       	ori	r24, 0x40	; 64
 3da:	80 93 81 00 	sts	0x0081, r24
  }

}
 3de:	9f 91       	pop	r25
 3e0:	8f 91       	pop	r24
 3e2:	4f 91       	pop	r20
 3e4:	3f 91       	pop	r19
 3e6:	2f 91       	pop	r18
 3e8:	0f 90       	pop	r0
 3ea:	0f be       	out	0x3f, r0	; 63
 3ec:	0f 90       	pop	r0
 3ee:	1f 90       	pop	r1
 3f0:	18 95       	reti

000003f2 <_Z10morseStartv>:

void morseStart()
{
  if (morseState != STOP) return;
 3f2:	80 91 00 01 	lds	r24, 0x0100
 3f6:	90 91 01 01 	lds	r25, 0x0101
 3fa:	09 97       	sbiw	r24, 0x09	; 9
 3fc:	31 f4       	brne	.+12     	; 0x40a <_Z10morseStartv+0x18>
  morseState = START;
 3fe:	88 e0       	ldi	r24, 0x08	; 8
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	90 93 01 01 	sts	0x0101, r25
 406:	80 93 00 01 	sts	0x0100, r24
 40a:	08 95       	ret

0000040c <_Z9morseStopv>:
}

void morseStop()
{
  morseState = STOP;
 40c:	89 e0       	ldi	r24, 0x09	; 9
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	90 93 01 01 	sts	0x0101, r25
 414:	80 93 00 01 	sts	0x0100, r24
  beeperOff();
 418:	6e ce       	rjmp	.-804    	; 0xf6 <_Z9beeperOffv>

0000041a <_Z12storeRunModeh>:
}

void storeRunMode(unsigned char newmode)
{
  eeprom_write_byte(0x00, newmode);
 41a:	68 2f       	mov	r22, r24
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	eb c2       	rjmp	.+1494   	; 0x9f8 <__eewr_byte_m88p>

00000422 <main>:
}

int main(void)
{
  enum { INIT = 0, WAIT_READY, READY, RUNNING, PROGRAM } runState = INIT;
  enum runMode_t { NORMAL = 0, INACTIVITY } runMode = NORMAL;
 422:	00 e0       	ldi	r16, 0x00	; 0
 424:	10 e0       	ldi	r17, 0x00	; 0
  eeprom_write_byte(0x00, newmode);
}

int main(void)
{
  enum { INIT = 0, WAIT_READY, READY, RUNNING, PROGRAM } runState = INIT;
 426:	c0 e0       	ldi	r28, 0x00	; 0
 428:	d0 e0       	ldi	r29, 0x00	; 0
                if (inactiveTimer++ > 600/*TODO -- how long to wait for inactivity before alarming*/)
                {
                  inactiveTimer--; // don't let this keep climbing
                  if (morseState == STOP)
                  {
                    morseString = (char *)PSTR("LOST "); 
 42a:	5a e6       	ldi	r21, 0x6A	; 106
 42c:	25 2e       	mov	r2, r21
 42e:	50 e0       	ldi	r21, 0x00	; 0
 430:	35 2e       	mov	r3, r21
                pgmState = ASK_NORMAL;
            }
            break;

          case OK:
            morseString = (char *)PSTR("OK ");
 432:	66 e5       	ldi	r22, 0x56	; 86
 434:	66 2e       	mov	r6, r22
 436:	60 e0       	ldi	r22, 0x00	; 0
 438:	76 2e       	mov	r7, r22
            morseStart();
            pgmState = EXIT;
 43a:	77 e0       	ldi	r23, 0x07	; 7
 43c:	a7 2e       	mov	r10, r23
 43e:	b1 2c       	mov	r11, r1
                {
                  storeRunMode(INACTIVITY);
                  pgmState = OK;
                }
              } else
                pgmState = ASK_NORMAL;
 440:	e2 e0       	ldi	r30, 0x02	; 2
 442:	ee 2e       	mov	r14, r30
 444:	f1 2c       	mov	r15, r1
              if (pgmTimer++ < 200) // did they say yes?
              {
                if (sigPulseWidth < MIDPOINT)
                {
                  storeRunMode(INACTIVITY);
                  pgmState = OK;
 446:	f6 e0       	ldi	r31, 0x06	; 6
 448:	cf 2e       	mov	r12, r31
 44a:	d1 2c       	mov	r13, r1

          case ASK_INACTIVE:
            if (morseState == STOP) // wait for morse code to finish sounding
            {
              pgmTimer = 0;
              morseString = (char *)PSTR("I? ");
 44c:	aa e5       	ldi	r26, 0x5A	; 90
 44e:	8a 2e       	mov	r8, r26
 450:	a0 e0       	ldi	r26, 0x00	; 0
 452:	9a 2e       	mov	r9, r26
   ****  STATE MACHINE   ****
   **************************/
  while (1)
  {

    runningIndicatorEnabled = (runState == RUNNING) ? true : false;
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	c3 30       	cpi	r28, 0x03	; 3
 458:	d1 05       	cpc	r29, r1
 45a:	09 f0       	breq	.+2      	; 0x45e <main+0x3c>
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	80 93 02 01 	sts	0x0102, r24
    switch (runState) 
 462:	c2 30       	cpi	r28, 0x02	; 2
 464:	d1 05       	cpc	r29, r1
 466:	09 f4       	brne	.+2      	; 0x46a <main+0x48>
 468:	a8 c0       	rjmp	.+336    	; 0x5ba <__stack+0xbb>
 46a:	2c f4       	brge	.+10     	; 0x476 <main+0x54>
 46c:	c1 30       	cpi	r28, 0x01	; 1
 46e:	d1 05       	cpc	r29, r1
 470:	09 f4       	brne	.+2      	; 0x474 <main+0x52>
 472:	91 c0       	rjmp	.+290    	; 0x596 <__stack+0x97>
 474:	08 c0       	rjmp	.+16     	; 0x486 <main+0x64>
 476:	c3 30       	cpi	r28, 0x03	; 3
 478:	d1 05       	cpc	r29, r1
 47a:	09 f4       	brne	.+2      	; 0x47e <main+0x5c>
 47c:	bd c0       	rjmp	.+378    	; 0x5f8 <__stack+0xf9>
 47e:	c4 30       	cpi	r28, 0x04	; 4
 480:	d1 05       	cpc	r29, r1
 482:	09 f4       	brne	.+2      	; 0x486 <main+0x64>
 484:	4d c1       	rjmp	.+666    	; 0x720 <__stack+0x221>
    {
      case INIT: 
      {
        cli();
 486:	f8 94       	cli
        wdt_reset();
 488:	a8 95       	wdr

        wdt_enable(WDTO_4S);  // 4 second watchdog timer. (Brown Out Detector fuses are set for 2.7V)
 48a:	88 e2       	ldi	r24, 0x28	; 40
 48c:	28 e1       	ldi	r18, 0x18	; 24
 48e:	30 e0       	ldi	r19, 0x00	; 0
 490:	0f b6       	in	r0, 0x3f	; 63
 492:	f8 94       	cli
 494:	a8 95       	wdr
 496:	20 93 60 00 	sts	0x0060, r18
 49a:	0f be       	out	0x3f, r0	; 63
 49c:	80 93 60 00 	sts	0x0060, r24

        LED1_DDR |= (1<<LED1_BIT); LED1_PORT &= ~(1<<LED1_BIT);     // output
 4a0:	3a 9a       	sbi	0x07, 2	; 7
 4a2:	42 98       	cbi	0x08, 2	; 8
        LED2_DDR |= (1<<LED2_BIT); LED2_PORT &= ~(1<<LED2_BIT);     // output
 4a4:	3b 9a       	sbi	0x07, 3	; 7
 4a6:	43 98       	cbi	0x08, 3	; 8
        LED3_DDR |= (1<<LED3_BIT); LED3_PORT &= ~(1<<LED3_BIT);     // output
 4a8:	3c 9a       	sbi	0x07, 4	; 7
 4aa:	44 98       	cbi	0x08, 4	; 8
        PIEZO_DDR |= (1<<PIEZO_BIT); PIEZO_PORT &= ~(1<<PIEZO_BIT); // output (PWM on timer 0)
 4ac:	55 9a       	sbi	0x0a, 5	; 10
 4ae:	5d 98       	cbi	0x0b, 5	; 11
        SIG_DDR &= ~(1<<SIG_BIT); SIG_PORT |= (1<<SIG_BIT);         // input with pullup (ICR1)
 4b0:	20 98       	cbi	0x04, 0	; 4
 4b2:	28 9a       	sbi	0x05, 0	; 5

        // set up PWM output on OC0B pin (timer 0)
        TCCR0A = (0b01<<WGM00); // 8-bit Phase Correct PWM mode, output on OC0B (PD5) ...
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	84 bd       	out	0x24, r24	; 36
        TCCR0B = (1<<WGM02) | (0b010<<CS00); // ... clk/8 with TOP(OCR0A)=180 / 2 gives ~2.8KHz
 4b8:	8a e0       	ldi	r24, 0x0A	; 10
 4ba:	85 bd       	out	0x25, r24	; 37

        // start piezo tone out at a lower, quieter frequency and duty cycle
        OCR0A = 255; 
 4bc:	8f ef       	ldi	r24, 0xFF	; 255
 4be:	87 bd       	out	0x27, r24	; 39
        OCR0B = PWM_DUTY_CYCLE_QUIET;
 4c0:	82 e0       	ldi	r24, 0x02	; 2
 4c2:	88 bd       	out	0x28, r24	; 40

        // set up timer 1 for input capture compare on ICP1 pin
        TCCR1A = (0b00<<WGM10);
 4c4:	10 92 80 00 	sts	0x0080, r1
        TCCR1B = (0b010<<CS10); // clk/8 for 1MHz counting
 4c8:	80 93 81 00 	sts	0x0081, r24
        TCCR1B |= (1<<ICES1);   // look for rising edge first
 4cc:	90 91 81 00 	lds	r25, 0x0081
 4d0:	90 64       	ori	r25, 0x40	; 64
 4d2:	90 93 81 00 	sts	0x0081, r25
        TCNT1 = 0;
 4d6:	10 92 85 00 	sts	0x0085, r1
 4da:	10 92 84 00 	sts	0x0084, r1
        sigPulseWidth = PULSE_INVALID; 
 4de:	ef ef       	ldi	r30, 0xFF	; 255
 4e0:	ff ef       	ldi	r31, 0xFF	; 255
 4e2:	f0 93 06 01 	sts	0x0106, r31
 4e6:	e0 93 05 01 	sts	0x0105, r30
        TIMSK1 = (1<<ICIE1);    // input capture interrupt enabled
 4ea:	90 e2       	ldi	r25, 0x20	; 32
 4ec:	90 93 6f 00 	sts	0x006F, r25

        // set up timer 2 for the Morse code sate machine
        TCCR2A = (0x10<<WGM20); // CTC mode
 4f0:	90 e1       	ldi	r25, 0x10	; 16
 4f2:	90 93 b0 00 	sts	0x00B0, r25
        TCCR2B = (0b010<<CS20); // CLK / 8 (1Mhz counter rate)
 4f6:	80 93 b1 00 	sts	0x00B1, r24
        TCNT2 = 0;
 4fa:	10 92 b2 00 	sts	0x00B2, r1
        OCR2A = 249;            // counter TOP (250uS, 8-bit timer)
 4fe:	99 ef       	ldi	r25, 0xF9	; 249
 500:	90 93 b3 00 	sts	0x00B3, r25
        TIMSK2 = (1<<OCIE2A);   // enable timer 2 OC interrupt (every 1ms) 
 504:	80 93 70 00 	sts	0x0070, r24

        
        sei(); // gloabl interrupt enable
 508:	78 94       	sei

        // retrieve stored Run Mode from EEPROM
        runMode = (enum runMode_t)eeprom_read_byte(0x00);
 50a:	80 e0       	ldi	r24, 0x00	; 0
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	6c d2       	rcall	.+1240   	; 0x9e8 <__eerd_byte_m88p>
        if (runMode > INACTIVITY) // sanitize
 510:	08 2f       	mov	r16, r24
 512:	10 e0       	ldi	r17, 0x00	; 0
 514:	02 30       	cpi	r16, 0x02	; 2
 516:	11 05       	cpc	r17, r1
 518:	24 f0       	brlt	.+8      	; 0x522 <__stack+0x23>
        {
          runMode = NORMAL;
          storeRunMode(runMode);
 51a:	80 e0       	ldi	r24, 0x00	; 0
 51c:	7e df       	rcall	.-260    	; 0x41a <_Z12storeRunModeh>

        // retrieve stored Run Mode from EEPROM
        runMode = (enum runMode_t)eeprom_read_byte(0x00);
        if (runMode > INACTIVITY) // sanitize
        {
          runMode = NORMAL;
 51e:	00 e0       	ldi	r16, 0x00	; 0
 520:	10 e0       	ldi	r17, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 522:	ff ef       	ldi	r31, 0xFF	; 255
 524:	29 e6       	ldi	r18, 0x69	; 105
 526:	38 e1       	ldi	r19, 0x18	; 24
 528:	f1 50       	subi	r31, 0x01	; 1
 52a:	20 40       	sbci	r18, 0x00	; 0
 52c:	30 40       	sbci	r19, 0x00	; 0
 52e:	e1 f7       	brne	.-8      	; 0x528 <__stack+0x29>
 530:	00 c0       	rjmp	.+0      	; 0x532 <__stack+0x33>
 532:	00 00       	nop
 534:	6a e0       	ldi	r22, 0x0A	; 10
 536:	70 e0       	ldi	r23, 0x00	; 0
          storeRunMode(runMode);
        }

        _delay_ms(1000);             // allow one second for the receiver to boot up
        unsigned int pulseSum = 0;
        unsigned int lastPW = 0;
 538:	80 e0       	ldi	r24, 0x00	; 0
 53a:	90 e0       	ldi	r25, 0x00	; 0
          runMode = NORMAL;
          storeRunMode(runMode);
        }

        _delay_ms(1000);             // allow one second for the receiver to boot up
        unsigned int pulseSum = 0;
 53c:	40 e0       	ldi	r20, 0x00	; 0
 53e:	50 e0       	ldi	r21, 0x00	; 0
        unsigned int lastPW = 0;
        int count;
        for (count = 0; count < 10; count++)
        {
          int thisPulse = sigPulseWidth;
 540:	20 91 05 01 	lds	r18, 0x0105
 544:	30 91 06 01 	lds	r19, 0x0106
          if (lastPW == 0) lastPW = thisPulse;
 548:	00 97       	sbiw	r24, 0x00	; 0
 54a:	09 f4       	brne	.+2      	; 0x54e <__stack+0x4f>
 54c:	c9 01       	movw	r24, r18
          if (thisPulse > 0)
 54e:	12 16       	cp	r1, r18
 550:	13 06       	cpc	r1, r19
 552:	64 f4       	brge	.+24     	; 0x56c <__stack+0x6d>
          {
            pulseSum += abs(thisPulse - lastPW);
 554:	f9 01       	movw	r30, r18
 556:	e8 1b       	sub	r30, r24
 558:	f9 0b       	sbc	r31, r25
 55a:	cf 01       	movw	r24, r30
 55c:	f7 ff       	sbrs	r31, 7
 55e:	03 c0       	rjmp	.+6      	; 0x566 <__stack+0x67>
 560:	91 95       	neg	r25
 562:	81 95       	neg	r24
 564:	91 09       	sbc	r25, r1
 566:	48 0f       	add	r20, r24
 568:	59 1f       	adc	r21, r25
            lastPW = thisPulse;
 56a:	c9 01       	movw	r24, r18
 56c:	ff e7       	ldi	r31, 0x7F	; 127
 56e:	28 e3       	ldi	r18, 0x38	; 56
 570:	31 e0       	ldi	r19, 0x01	; 1
 572:	f1 50       	subi	r31, 0x01	; 1
 574:	20 40       	sbci	r18, 0x00	; 0
 576:	30 40       	sbci	r19, 0x00	; 0
 578:	e1 f7       	brne	.-8      	; 0x572 <__stack+0x73>
 57a:	00 c0       	rjmp	.+0      	; 0x57c <__stack+0x7d>
 57c:	00 00       	nop
 57e:	61 50       	subi	r22, 0x01	; 1
 580:	71 09       	sbc	r23, r1

        _delay_ms(1000);             // allow one second for the receiver to boot up
        unsigned int pulseSum = 0;
        unsigned int lastPW = 0;
        int count;
        for (count = 0; count < 10; count++)
 582:	61 15       	cp	r22, r1
 584:	71 05       	cpc	r23, r1
 586:	e1 f6       	brne	.-72     	; 0x540 <__stack+0x41>
            pulseSum += abs(thisPulse - lastPW);
            lastPW = thisPulse;
          }
          _delay_ms(50);
        }
        if ((pulseSum / count) > 200) // enter programming mode if average pulse delta large enough 
 588:	4a 3d       	cpi	r20, 0xDA	; 218
 58a:	57 40       	sbci	r21, 0x07	; 7
 58c:	08 f4       	brcc	.+2      	; 0x590 <__stack+0x91>
 58e:	a1 c1       	rjmp	.+834    	; 0x8d2 <__stack+0x3d3>
        {
          runState = PROGRAM;
 590:	c4 e0       	ldi	r28, 0x04	; 4
 592:	d0 e0       	ldi	r29, 0x00	; 0
 594:	b3 c1       	rjmp	.+870    	; 0x8fc <__stack+0x3fd>
        break;
      }

      case WAIT_READY: 
      {
        LED_ON(1);
 596:	42 9a       	sbi	0x08, 2	; 8

        if ((sigPulseWidth < 0) && (morseState == STOP))
 598:	20 91 05 01 	lds	r18, 0x0105
 59c:	30 91 06 01 	lds	r19, 0x0106
 5a0:	80 91 00 01 	lds	r24, 0x0100
 5a4:	90 91 01 01 	lds	r25, 0x0101
 5a8:	37 ff       	sbrs	r19, 7
 5aa:	99 c1       	rjmp	.+818    	; 0x8de <__stack+0x3df>
 5ac:	89 30       	cpi	r24, 0x09	; 9
 5ae:	91 05       	cpc	r25, r1
 5b0:	09 f0       	breq	.+2      	; 0x5b4 <__stack+0xb5>
 5b2:	95 c1       	rjmp	.+810    	; 0x8de <__stack+0x3df>
        {
          morseString = (char *)PSTR("E   ");
 5b4:	80 e8       	ldi	r24, 0x80	; 128
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	a9 c1       	rjmp	.+850    	; 0x90c <__stack+0x40d>
        break;
      }

      case READY:
      {
        if (morseState == STOP)
 5ba:	80 91 00 01 	lds	r24, 0x0100
 5be:	90 91 01 01 	lds	r25, 0x0101
 5c2:	09 97       	sbiw	r24, 0x09	; 9
 5c4:	09 f0       	breq	.+2      	; 0x5c8 <__stack+0xc9>
 5c6:	9a c1       	rjmp	.+820    	; 0x8fc <__stack+0x3fd>
        {
          // Set beeper frqeuency to ~2.8KHz at 15% duty cycle = LOUD!
          OCR0A = 180;
 5c8:	84 eb       	ldi	r24, 0xB4	; 180
 5ca:	87 bd       	out	0x27, r24	; 39
          OCR0B = PWM_DUTY_CYCLE;
 5cc:	83 e0       	ldi	r24, 0x03	; 3
 5ce:	88 bd       	out	0x28, r24	; 40

          // emit a single, loud "BIP!"
          if (sigPulseWidth < MIDPOINT)
 5d0:	80 91 05 01 	lds	r24, 0x0105
 5d4:	90 91 06 01 	lds	r25, 0x0106
 5d8:	8c 3d       	cpi	r24, 0xDC	; 220
 5da:	95 40       	sbci	r25, 0x05	; 5
 5dc:	0c f0       	brlt	.+2      	; 0x5e0 <__stack+0xe1>
 5de:	7c c1       	rjmp	.+760    	; 0x8d8 <__stack+0x3d9>
          {
            beeperOn();
 5e0:	85 dd       	rcall	.-1270   	; 0xec <_Z8beeperOnv>
 5e2:	ff ef       	ldi	r31, 0xFF	; 255
 5e4:	20 e7       	ldi	r18, 0x70	; 112
 5e6:	32 e0       	ldi	r19, 0x02	; 2
 5e8:	f1 50       	subi	r31, 0x01	; 1
 5ea:	20 40       	sbci	r18, 0x00	; 0
 5ec:	30 40       	sbci	r19, 0x00	; 0
 5ee:	e1 f7       	brne	.-8      	; 0x5e8 <__stack+0xe9>
 5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <__stack+0xf3>
 5f2:	00 00       	nop
            _delay_ms(100);
            beeperOff();
 5f4:	80 dd       	rcall	.-1280   	; 0xf6 <_Z9beeperOffv>
 5f6:	70 c1       	rjmp	.+736    	; 0x8d8 <__stack+0x3d9>
        break;
      }

      case RUNNING: 
      {
        switch (runMode)
 5f8:	01 15       	cp	r16, r1
 5fa:	11 05       	cpc	r17, r1
 5fc:	21 f0       	breq	.+8      	; 0x606 <__stack+0x107>
 5fe:	01 30       	cpi	r16, 0x01	; 1
 600:	11 05       	cpc	r17, r1
 602:	c9 f0       	breq	.+50     	; 0x636 <__stack+0x137>
 604:	7b c1       	rjmp	.+758    	; 0x8fc <__stack+0x3fd>
        {
          case NORMAL: /* manually switched at transmitter */
          {
            if (sigPulseWidth > 0)
 606:	80 91 05 01 	lds	r24, 0x0105
 60a:	90 91 06 01 	lds	r25, 0x0106
 60e:	18 16       	cp	r1, r24
 610:	19 06       	cpc	r1, r25
 612:	0c f0       	brlt	.+2      	; 0x616 <__stack+0x117>
 614:	83 c0       	rjmp	.+262    	; 0x71c <__stack+0x21d>
            {
              if (sigPulseWidth > MIDPOINT)
 616:	80 91 05 01 	lds	r24, 0x0105
 61a:	90 91 06 01 	lds	r25, 0x0106
 61e:	8d 3d       	cpi	r24, 0xDD	; 221
 620:	95 40       	sbci	r25, 0x05	; 5
 622:	3c f0       	brlt	.+14     	; 0x632 <__stack+0x133>
              {
                morseString = (char *)PSTR("LOST "); 
 624:	20 e7       	ldi	r18, 0x70	; 112
 626:	30 e0       	ldi	r19, 0x00	; 0
 628:	30 93 08 01 	sts	0x0108, r19
 62c:	20 93 07 01 	sts	0x0107, r18
 630:	71 c1       	rjmp	.+738    	; 0x914 <__stack+0x415>
                morseStart();    // start bleeting loud morse tones
              }
              else
                morseStop();
 632:	ec de       	rcall	.-552    	; 0x40c <_Z9morseStopv>
 634:	63 c1       	rjmp	.+710    	; 0x8fc <__stack+0x3fd>
            static int last_sigPulseWidth = 0;
            static int last_sigPulseWidthAverage = 0;
            static int sigPulseWidthAverage;
            static unsigned int inactiveTimer = 0;
            
            if (sigPulseWidth > 0) // if pulse has not timed out
 636:	80 91 05 01 	lds	r24, 0x0105
 63a:	90 91 06 01 	lds	r25, 0x0106
 63e:	18 16       	cp	r1, r24
 640:	19 06       	cpc	r1, r25
 642:	0c f0       	brlt	.+2      	; 0x646 <__stack+0x147>
 644:	6b c0       	rjmp	.+214    	; 0x71c <__stack+0x21d>
            {
              int thisPulse = sigPulseWidth;
 646:	20 91 05 01 	lds	r18, 0x0105
 64a:	30 91 06 01 	lds	r19, 0x0106
              if (last_sigPulseWidth == 0) last_sigPulseWidth = thisPulse;
 64e:	80 91 13 01 	lds	r24, 0x0113
 652:	90 91 14 01 	lds	r25, 0x0114
 656:	89 2b       	or	r24, r25
 658:	21 f4       	brne	.+8      	; 0x662 <__stack+0x163>
 65a:	30 93 14 01 	sts	0x0114, r19
 65e:	20 93 13 01 	sts	0x0113, r18
              sigPulseWidthAverage = ((last_sigPulseWidth * 7) + thisPulse) / 8; // some noise filtering
 662:	40 91 13 01 	lds	r20, 0x0113
 666:	50 91 14 01 	lds	r21, 0x0114
 66a:	67 e0       	ldi	r22, 0x07	; 7
 66c:	64 9f       	mul	r22, r20
 66e:	c0 01       	movw	r24, r0
 670:	65 9f       	mul	r22, r21
 672:	90 0d       	add	r25, r0
 674:	11 24       	eor	r1, r1
 676:	82 0f       	add	r24, r18
 678:	93 1f       	adc	r25, r19
 67a:	97 fd       	sbrc	r25, 7
 67c:	07 96       	adiw	r24, 0x07	; 7
 67e:	2c 01       	movw	r4, r24
 680:	43 e0       	ldi	r20, 0x03	; 3
 682:	55 94       	asr	r5
 684:	47 94       	ror	r4
 686:	4a 95       	dec	r20
 688:	e1 f7       	brne	.-8      	; 0x682 <__stack+0x183>
 68a:	50 92 12 01 	sts	0x0112, r5
 68e:	40 92 11 01 	sts	0x0111, r4
              last_sigPulseWidth = thisPulse;
 692:	30 93 14 01 	sts	0x0114, r19
 696:	20 93 13 01 	sts	0x0113, r18

              if (last_sigPulseWidthAverage == 0)
 69a:	80 91 0f 01 	lds	r24, 0x010F
 69e:	90 91 10 01 	lds	r25, 0x0110
 6a2:	89 2b       	or	r24, r25
 6a4:	21 f4       	brne	.+8      	; 0x6ae <__stack+0x1af>
                last_sigPulseWidthAverage = sigPulseWidthAverage;
 6a6:	50 92 10 01 	sts	0x0110, r5
 6aa:	40 92 0f 01 	sts	0x010F, r4

              if ( (sigPulseWidthAverage > (last_sigPulseWidthAverage-20)) 
 6ae:	80 91 0f 01 	lds	r24, 0x010F
 6b2:	90 91 10 01 	lds	r25, 0x0110
 6b6:	9c 01       	movw	r18, r24
 6b8:	23 51       	subi	r18, 0x13	; 19
 6ba:	31 09       	sbc	r19, r1
 6bc:	42 16       	cp	r4, r18
 6be:	53 06       	cpc	r5, r19
 6c0:	1c f1       	brlt	.+70     	; 0x708 <__stack+0x209>
                  && (sigPulseWidthAverage < (last_sigPulseWidthAverage+20/*TODO sensitivity*/)) )
 6c2:	43 96       	adiw	r24, 0x13	; 19
 6c4:	84 15       	cp	r24, r4
 6c6:	95 05       	cpc	r25, r5
 6c8:	fc f0       	brlt	.+62     	; 0x708 <__stack+0x209>
              {
                if (inactiveTimer++ > 600/*TODO -- how long to wait for inactivity before alarming*/)
 6ca:	80 91 0d 01 	lds	r24, 0x010D
 6ce:	90 91 0e 01 	lds	r25, 0x010E
 6d2:	9c 01       	movw	r18, r24
 6d4:	2f 5f       	subi	r18, 0xFF	; 255
 6d6:	3f 4f       	sbci	r19, 0xFF	; 255
 6d8:	30 93 0e 01 	sts	0x010E, r19
 6dc:	20 93 0d 01 	sts	0x010D, r18
 6e0:	89 35       	cpi	r24, 0x59	; 89
 6e2:	32 e0       	ldi	r19, 0x02	; 2
 6e4:	93 07       	cpc	r25, r19
 6e6:	a8 f0       	brcs	.+42     	; 0x712 <__stack+0x213>
                {
                  inactiveTimer--; // don't let this keep climbing
 6e8:	90 93 0e 01 	sts	0x010E, r25
 6ec:	80 93 0d 01 	sts	0x010D, r24
                  if (morseState == STOP)
 6f0:	80 91 00 01 	lds	r24, 0x0100
 6f4:	90 91 01 01 	lds	r25, 0x0101
 6f8:	09 97       	sbiw	r24, 0x09	; 9
 6fa:	59 f4       	brne	.+22     	; 0x712 <__stack+0x213>
                  {
                    morseString = (char *)PSTR("LOST "); 
 6fc:	30 92 08 01 	sts	0x0108, r3
 700:	20 92 07 01 	sts	0x0107, r2
                    morseStart();   // start bleeting loud morse tones
 704:	76 de       	rcall	.-788    	; 0x3f2 <_Z10morseStartv>
 706:	05 c0       	rjmp	.+10     	; 0x712 <__stack+0x213>
                  }
                }
              }
              else
              {
                inactiveTimer = 0;
 708:	10 92 0e 01 	sts	0x010E, r1
 70c:	10 92 0d 01 	sts	0x010D, r1
                morseStop();
 710:	7d de       	rcall	.-774    	; 0x40c <_Z9morseStopv>
              }
              last_sigPulseWidthAverage = sigPulseWidthAverage;
 712:	50 92 10 01 	sts	0x0110, r5
 716:	40 92 0f 01 	sts	0x010F, r4
 71a:	f0 c0       	rjmp	.+480    	; 0x8fc <__stack+0x3fd>

            }
            else
            {
              morseStop();
 71c:	77 de       	rcall	.-786    	; 0x40c <_Z9morseStopv>
 71e:	d9 c0       	rjmp	.+434    	; 0x8d2 <__stack+0x3d3>
          EXIT 
        } pgmState = WAIT;
        static int pgmTimer = 0;


        switch (pgmState)
 720:	e0 91 0b 01 	lds	r30, 0x010B
 724:	f0 91 0c 01 	lds	r31, 0x010C
 728:	e8 30       	cpi	r30, 0x08	; 8
 72a:	f1 05       	cpc	r31, r1
 72c:	08 f0       	brcs	.+2      	; 0x730 <__stack+0x231>
 72e:	e6 c0       	rjmp	.+460    	; 0x8fc <__stack+0x3fd>
 730:	ed 5d       	subi	r30, 0xDD	; 221
 732:	ff 4f       	sbci	r31, 0xFF	; 255
 734:	09 94       	ijmp
        {
          case WAIT:
            if (sigPulseWidth < (MIDPOINT * 1.17)) // at least 3/4 stick needed (allowing for first 1ms being included)
 736:	80 91 05 01 	lds	r24, 0x0105
 73a:	90 91 06 01 	lds	r25, 0x0106
 73e:	bc 01       	movw	r22, r24
 740:	88 27       	eor	r24, r24
 742:	77 fd       	sbrc	r23, 7
 744:	80 95       	com	r24
 746:	98 2f       	mov	r25, r24
 748:	f0 d0       	rcall	.+480    	; 0x92a <__floatsisf>
 74a:	2f ef       	ldi	r18, 0xFF	; 255
 74c:	3f e5       	ldi	r19, 0x5F	; 95
 74e:	4b ed       	ldi	r20, 0xDB	; 219
 750:	54 e4       	ldi	r21, 0x44	; 68
 752:	e5 d0       	rcall	.+458    	; 0x91e <__cmpsf2>
 754:	87 ff       	sbrs	r24, 7
 756:	0e c0       	rjmp	.+28     	; 0x774 <__stack+0x275>
            { 
              if (morseState == STOP)
 758:	80 91 00 01 	lds	r24, 0x0100
 75c:	90 91 01 01 	lds	r25, 0x0101
 760:	09 97       	sbiw	r24, 0x09	; 9
 762:	09 f0       	breq	.+2      	; 0x766 <__stack+0x267>
 764:	cb c0       	rjmp	.+406    	; 0x8fc <__stack+0x3fd>
              {
                LED_TOGGLE(2);
 766:	88 b1       	in	r24, 0x08	; 8
 768:	98 e0       	ldi	r25, 0x08	; 8
 76a:	89 27       	eor	r24, r25
 76c:	88 b9       	out	0x08, r24	; 8
                morseString = (char *)PSTR("W  ");
 76e:	86 e6       	ldi	r24, 0x66	; 102
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	cc c0       	rjmp	.+408    	; 0x90c <__stack+0x40d>
                morseStart();
              }
            }
            else if (pgmTimer++ > 100)
 774:	80 91 09 01 	lds	r24, 0x0109
 778:	90 91 0a 01 	lds	r25, 0x010A
 77c:	85 36       	cpi	r24, 0x65	; 101
 77e:	91 05       	cpc	r25, r1
 780:	34 f4       	brge	.+12     	; 0x78e <__stack+0x28f>
 782:	01 96       	adiw	r24, 0x01	; 1
 784:	90 93 0a 01 	sts	0x010A, r25
 788:	80 93 09 01 	sts	0x0109, r24
 78c:	b7 c0       	rjmp	.+366    	; 0x8fc <__stack+0x3fd>
            {
              pgmTimer = 0;
 78e:	10 92 0a 01 	sts	0x010A, r1
 792:	10 92 09 01 	sts	0x0109, r1
              morseStop();
 796:	3a de       	rcall	.-908    	; 0x40c <_Z9morseStopv>
              pgmState = ENTER;
 798:	81 e0       	ldi	r24, 0x01	; 1
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	5a c0       	rjmp	.+180    	; 0x852 <__stack+0x353>
            }
            break;

          case ENTER:
            LED_ON(1);
 79e:	42 9a       	sbi	0x08, 2	; 8
            morseString = (char *)PSTR("P  ");
 7a0:	82 e6       	ldi	r24, 0x62	; 98
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	90 93 08 01 	sts	0x0108, r25
 7a8:	80 93 07 01 	sts	0x0107, r24
            morseStart();
 7ac:	22 de       	rcall	.-956    	; 0x3f2 <_Z10morseStartv>
 7ae:	79 c0       	rjmp	.+242    	; 0x8a2 <__stack+0x3a3>
            pgmState = ASK_NORMAL;
            break;

          case ASK_NORMAL:
            if (morseState == STOP) // wait for morse code to finish sounding
 7b0:	80 91 00 01 	lds	r24, 0x0100
 7b4:	90 91 01 01 	lds	r25, 0x0101
 7b8:	09 97       	sbiw	r24, 0x09	; 9
 7ba:	09 f0       	breq	.+2      	; 0x7be <__stack+0x2bf>
 7bc:	9f c0       	rjmp	.+318    	; 0x8fc <__stack+0x3fd>
            {
              pgmTimer = 0;
 7be:	10 92 0a 01 	sts	0x010A, r1
 7c2:	10 92 09 01 	sts	0x0109, r1
              morseString = (char *)PSTR("N? ");
 7c6:	8e e5       	ldi	r24, 0x5E	; 94
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	90 93 08 01 	sts	0x0108, r25
 7ce:	80 93 07 01 	sts	0x0107, r24
              morseStart();
 7d2:	0f de       	rcall	.-994    	; 0x3f2 <_Z10morseStartv>
              pgmState = ANS_NORMAL;
 7d4:	e3 e0       	ldi	r30, 0x03	; 3
 7d6:	f0 e0       	ldi	r31, 0x00	; 0
 7d8:	f0 93 0c 01 	sts	0x010C, r31
 7dc:	e0 93 0b 01 	sts	0x010B, r30
 7e0:	8d c0       	rjmp	.+282    	; 0x8fc <__stack+0x3fd>
            }
            break;

          case ANS_NORMAL:
            if (morseState == STOP) // wait for morse code to finish sounding
 7e2:	80 91 00 01 	lds	r24, 0x0100
 7e6:	90 91 01 01 	lds	r25, 0x0101
 7ea:	09 97       	sbiw	r24, 0x09	; 9
 7ec:	09 f0       	breq	.+2      	; 0x7f0 <__stack+0x2f1>
 7ee:	86 c0       	rjmp	.+268    	; 0x8fc <__stack+0x3fd>
            {
              if (pgmTimer++ < 200) // did they say yes?
 7f0:	80 91 09 01 	lds	r24, 0x0109
 7f4:	90 91 0a 01 	lds	r25, 0x010A
 7f8:	9c 01       	movw	r18, r24
 7fa:	2f 5f       	subi	r18, 0xFF	; 255
 7fc:	3f 4f       	sbci	r19, 0xFF	; 255
 7fe:	30 93 0a 01 	sts	0x010A, r19
 802:	20 93 09 01 	sts	0x0109, r18
 806:	88 3c       	cpi	r24, 0xC8	; 200
 808:	91 05       	cpc	r25, r1
 80a:	54 f4       	brge	.+20     	; 0x820 <__stack+0x321>
              {
                if (sigPulseWidth < MIDPOINT)
 80c:	80 91 05 01 	lds	r24, 0x0105
 810:	90 91 06 01 	lds	r25, 0x0106
 814:	8c 3d       	cpi	r24, 0xDC	; 220
 816:	95 40       	sbci	r25, 0x05	; 5
 818:	0c f0       	brlt	.+2      	; 0x81c <__stack+0x31d>
 81a:	70 c0       	rjmp	.+224    	; 0x8fc <__stack+0x3fd>
                {
                  storeRunMode(NORMAL);
 81c:	80 e0       	ldi	r24, 0x00	; 0
 81e:	3b c0       	rjmp	.+118    	; 0x896 <__stack+0x397>
                  pgmState = OK;
                }
              } else
                pgmState = ASK_INACTIVE;
 820:	24 e0       	ldi	r18, 0x04	; 4
 822:	30 e0       	ldi	r19, 0x00	; 0
 824:	30 93 0c 01 	sts	0x010C, r19
 828:	20 93 0b 01 	sts	0x010B, r18
 82c:	67 c0       	rjmp	.+206    	; 0x8fc <__stack+0x3fd>
            }
            break;

          case ASK_INACTIVE:
            if (morseState == STOP) // wait for morse code to finish sounding
 82e:	80 91 00 01 	lds	r24, 0x0100
 832:	90 91 01 01 	lds	r25, 0x0101
 836:	09 97       	sbiw	r24, 0x09	; 9
 838:	09 f0       	breq	.+2      	; 0x83c <__stack+0x33d>
 83a:	60 c0       	rjmp	.+192    	; 0x8fc <__stack+0x3fd>
            {
              pgmTimer = 0;
 83c:	10 92 0a 01 	sts	0x010A, r1
 840:	10 92 09 01 	sts	0x0109, r1
              morseString = (char *)PSTR("I? ");
 844:	90 92 08 01 	sts	0x0108, r9
 848:	80 92 07 01 	sts	0x0107, r8
              morseStart();
 84c:	d2 dd       	rcall	.-1116   	; 0x3f2 <_Z10morseStartv>
              pgmState = ANS_INACTIVE;
 84e:	85 e0       	ldi	r24, 0x05	; 5
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	90 93 0c 01 	sts	0x010C, r25
 856:	80 93 0b 01 	sts	0x010B, r24
 85a:	50 c0       	rjmp	.+160    	; 0x8fc <__stack+0x3fd>
            }
            break;

          case ANS_INACTIVE:
            if (morseState == STOP) // wait for morse code to finish sounding
 85c:	80 91 00 01 	lds	r24, 0x0100
 860:	90 91 01 01 	lds	r25, 0x0101
 864:	09 97       	sbiw	r24, 0x09	; 9
 866:	09 f0       	breq	.+2      	; 0x86a <__stack+0x36b>
 868:	49 c0       	rjmp	.+146    	; 0x8fc <__stack+0x3fd>
            {
              if (pgmTimer++ < 200) // did they say yes?
 86a:	80 91 09 01 	lds	r24, 0x0109
 86e:	90 91 0a 01 	lds	r25, 0x010A
 872:	9c 01       	movw	r18, r24
 874:	2f 5f       	subi	r18, 0xFF	; 255
 876:	3f 4f       	sbci	r19, 0xFF	; 255
 878:	30 93 0a 01 	sts	0x010A, r19
 87c:	20 93 09 01 	sts	0x0109, r18
 880:	88 3c       	cpi	r24, 0xC8	; 200
 882:	91 05       	cpc	r25, r1
 884:	74 f4       	brge	.+28     	; 0x8a2 <__stack+0x3a3>
              {
                if (sigPulseWidth < MIDPOINT)
 886:	80 91 05 01 	lds	r24, 0x0105
 88a:	90 91 06 01 	lds	r25, 0x0106
 88e:	8c 3d       	cpi	r24, 0xDC	; 220
 890:	95 40       	sbci	r25, 0x05	; 5
 892:	a4 f5       	brge	.+104    	; 0x8fc <__stack+0x3fd>
                {
                  storeRunMode(INACTIVITY);
 894:	81 e0       	ldi	r24, 0x01	; 1
 896:	c1 dd       	rcall	.-1150   	; 0x41a <_Z12storeRunModeh>
                  pgmState = OK;
 898:	d0 92 0c 01 	sts	0x010C, r13
 89c:	c0 92 0b 01 	sts	0x010B, r12
 8a0:	2d c0       	rjmp	.+90     	; 0x8fc <__stack+0x3fd>
                }
              } else
                pgmState = ASK_NORMAL;
 8a2:	f0 92 0c 01 	sts	0x010C, r15
 8a6:	e0 92 0b 01 	sts	0x010B, r14
 8aa:	28 c0       	rjmp	.+80     	; 0x8fc <__stack+0x3fd>
            }
            break;

          case OK:
            morseString = (char *)PSTR("OK ");
 8ac:	70 92 08 01 	sts	0x0108, r7
 8b0:	60 92 07 01 	sts	0x0107, r6
            morseStart();
 8b4:	9e dd       	rcall	.-1220   	; 0x3f2 <_Z10morseStartv>
            pgmState = EXIT;
 8b6:	b0 92 0c 01 	sts	0x010C, r11
 8ba:	a0 92 0b 01 	sts	0x010B, r10
            break;
 8be:	1e c0       	rjmp	.+60     	; 0x8fc <__stack+0x3fd>

          case EXIT:
            if (morseState == STOP) // wait for morse code to finish sounding
 8c0:	80 91 00 01 	lds	r24, 0x0100
 8c4:	90 91 01 01 	lds	r25, 0x0101
 8c8:	09 97       	sbiw	r24, 0x09	; 9
 8ca:	c1 f4       	brne	.+48     	; 0x8fc <__stack+0x3fd>
              runState = INIT;
 8cc:	c0 e0       	ldi	r28, 0x00	; 0
 8ce:	d0 e0       	ldi	r29, 0x00	; 0
 8d0:	15 c0       	rjmp	.+42     	; 0x8fc <__stack+0x3fd>
        if ((pulseSum / count) > 200) // enter programming mode if average pulse delta large enough 
        {
          runState = PROGRAM;
          break;
        }
        runState = WAIT_READY;
 8d2:	c1 e0       	ldi	r28, 0x01	; 1
 8d4:	d0 e0       	ldi	r29, 0x00	; 0
 8d6:	12 c0       	rjmp	.+36     	; 0x8fc <__stack+0x3fd>
            beeperOn();
            _delay_ms(100);
            beeperOff();
          }

          runState = RUNNING;
 8d8:	c3 e0       	ldi	r28, 0x03	; 3
 8da:	d0 e0       	ldi	r29, 0x00	; 0
 8dc:	0f c0       	rjmp	.+30     	; 0x8fc <__stack+0x3fd>
        if ((sigPulseWidth < 0) && (morseState == STOP))
        {
          morseString = (char *)PSTR("E   ");
          morseStart();
        }
        else if (morseState == STOP)
 8de:	09 97       	sbiw	r24, 0x09	; 9
 8e0:	69 f4       	brne	.+26     	; 0x8fc <__stack+0x3fd>
        {
          if (runMode == NORMAL)
 8e2:	01 15       	cp	r16, r1
 8e4:	11 05       	cpc	r17, r1
 8e6:	c1 f4       	brne	.+48     	; 0x918 <__stack+0x419>
            morseString = (char *)PSTR("R N ");
 8e8:	8b e7       	ldi	r24, 0x7B	; 123
 8ea:	90 e0       	ldi	r25, 0x00	; 0
          else
            morseString = (char *)PSTR("R I ");
 8ec:	90 93 08 01 	sts	0x0108, r25
 8f0:	80 93 07 01 	sts	0x0107, r24
          morseStart();
 8f4:	7e dd       	rcall	.-1284   	; 0x3f2 <_Z10morseStartv>
          LED_OFF(1);
 8f6:	42 98       	cbi	0x08, 2	; 8
          runState = READY;
 8f8:	c2 e0       	ldi	r28, 0x02	; 2
 8fa:	d0 e0       	ldi	r29, 0x00	; 0
 8fc:	8f e1       	ldi	r24, 0x1F	; 31
 8fe:	9e e4       	ldi	r25, 0x4E	; 78
 900:	01 97       	sbiw	r24, 0x01	; 1
 902:	f1 f7       	brne	.-4      	; 0x900 <__stack+0x401>
 904:	00 c0       	rjmp	.+0      	; 0x906 <__stack+0x407>
 906:	00 00       	nop

    } // FSM switch

    _delay_ms(10); // XXX TODO: fix this ugly hack,  here just to slow down asynch counters for PROGRAM and INACTIVITY modes

    wdt_reset();
 908:	a8 95       	wdr
  } // MAIN LOOP
 90a:	a4 cd       	rjmp	.-1208   	; 0x454 <main+0x32>
      {
        LED_ON(1);

        if ((sigPulseWidth < 0) && (morseState == STOP))
        {
          morseString = (char *)PSTR("E   ");
 90c:	90 93 08 01 	sts	0x0108, r25
 910:	80 93 07 01 	sts	0x0107, r24
          morseStart();
 914:	6e dd       	rcall	.-1316   	; 0x3f2 <_Z10morseStartv>
 916:	f2 cf       	rjmp	.-28     	; 0x8fc <__stack+0x3fd>
        else if (morseState == STOP)
        {
          if (runMode == NORMAL)
            morseString = (char *)PSTR("R N ");
          else
            morseString = (char *)PSTR("R I ");
 918:	86 e7       	ldi	r24, 0x76	; 118
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	e7 cf       	rjmp	.-50     	; 0x8ec <__stack+0x3ed>

0000091e <__cmpsf2>:
 91e:	40 d0       	rcall	.+128    	; 0x9a0 <__fp_cmp>
 920:	08 f4       	brcc	.+2      	; 0x924 <__cmpsf2+0x6>
 922:	81 e0       	ldi	r24, 0x01	; 1
 924:	08 95       	ret

00000926 <__floatunsisf>:
 926:	e8 94       	clt
 928:	09 c0       	rjmp	.+18     	; 0x93c <__floatsisf+0x12>

0000092a <__floatsisf>:
 92a:	97 fb       	bst	r25, 7
 92c:	3e f4       	brtc	.+14     	; 0x93c <__floatsisf+0x12>
 92e:	90 95       	com	r25
 930:	80 95       	com	r24
 932:	70 95       	com	r23
 934:	61 95       	neg	r22
 936:	7f 4f       	sbci	r23, 0xFF	; 255
 938:	8f 4f       	sbci	r24, 0xFF	; 255
 93a:	9f 4f       	sbci	r25, 0xFF	; 255
 93c:	99 23       	and	r25, r25
 93e:	a9 f0       	breq	.+42     	; 0x96a <__floatsisf+0x40>
 940:	f9 2f       	mov	r31, r25
 942:	96 e9       	ldi	r25, 0x96	; 150
 944:	bb 27       	eor	r27, r27
 946:	93 95       	inc	r25
 948:	f6 95       	lsr	r31
 94a:	87 95       	ror	r24
 94c:	77 95       	ror	r23
 94e:	67 95       	ror	r22
 950:	b7 95       	ror	r27
 952:	f1 11       	cpse	r31, r1
 954:	f8 cf       	rjmp	.-16     	; 0x946 <__floatsisf+0x1c>
 956:	fa f4       	brpl	.+62     	; 0x996 <__floatsisf+0x6c>
 958:	bb 0f       	add	r27, r27
 95a:	11 f4       	brne	.+4      	; 0x960 <__floatsisf+0x36>
 95c:	60 ff       	sbrs	r22, 0
 95e:	1b c0       	rjmp	.+54     	; 0x996 <__floatsisf+0x6c>
 960:	6f 5f       	subi	r22, 0xFF	; 255
 962:	7f 4f       	sbci	r23, 0xFF	; 255
 964:	8f 4f       	sbci	r24, 0xFF	; 255
 966:	9f 4f       	sbci	r25, 0xFF	; 255
 968:	16 c0       	rjmp	.+44     	; 0x996 <__floatsisf+0x6c>
 96a:	88 23       	and	r24, r24
 96c:	11 f0       	breq	.+4      	; 0x972 <__floatsisf+0x48>
 96e:	96 e9       	ldi	r25, 0x96	; 150
 970:	11 c0       	rjmp	.+34     	; 0x994 <__floatsisf+0x6a>
 972:	77 23       	and	r23, r23
 974:	21 f0       	breq	.+8      	; 0x97e <__floatsisf+0x54>
 976:	9e e8       	ldi	r25, 0x8E	; 142
 978:	87 2f       	mov	r24, r23
 97a:	76 2f       	mov	r23, r22
 97c:	05 c0       	rjmp	.+10     	; 0x988 <__floatsisf+0x5e>
 97e:	66 23       	and	r22, r22
 980:	71 f0       	breq	.+28     	; 0x99e <__floatsisf+0x74>
 982:	96 e8       	ldi	r25, 0x86	; 134
 984:	86 2f       	mov	r24, r22
 986:	70 e0       	ldi	r23, 0x00	; 0
 988:	60 e0       	ldi	r22, 0x00	; 0
 98a:	2a f0       	brmi	.+10     	; 0x996 <__floatsisf+0x6c>
 98c:	9a 95       	dec	r25
 98e:	66 0f       	add	r22, r22
 990:	77 1f       	adc	r23, r23
 992:	88 1f       	adc	r24, r24
 994:	da f7       	brpl	.-10     	; 0x98c <__floatsisf+0x62>
 996:	88 0f       	add	r24, r24
 998:	96 95       	lsr	r25
 99a:	87 95       	ror	r24
 99c:	97 f9       	bld	r25, 7
 99e:	08 95       	ret

000009a0 <__fp_cmp>:
 9a0:	99 0f       	add	r25, r25
 9a2:	00 08       	sbc	r0, r0
 9a4:	55 0f       	add	r21, r21
 9a6:	aa 0b       	sbc	r26, r26
 9a8:	e0 e8       	ldi	r30, 0x80	; 128
 9aa:	fe ef       	ldi	r31, 0xFE	; 254
 9ac:	16 16       	cp	r1, r22
 9ae:	17 06       	cpc	r1, r23
 9b0:	e8 07       	cpc	r30, r24
 9b2:	f9 07       	cpc	r31, r25
 9b4:	c0 f0       	brcs	.+48     	; 0x9e6 <__fp_cmp+0x46>
 9b6:	12 16       	cp	r1, r18
 9b8:	13 06       	cpc	r1, r19
 9ba:	e4 07       	cpc	r30, r20
 9bc:	f5 07       	cpc	r31, r21
 9be:	98 f0       	brcs	.+38     	; 0x9e6 <__fp_cmp+0x46>
 9c0:	62 1b       	sub	r22, r18
 9c2:	73 0b       	sbc	r23, r19
 9c4:	84 0b       	sbc	r24, r20
 9c6:	95 0b       	sbc	r25, r21
 9c8:	39 f4       	brne	.+14     	; 0x9d8 <__fp_cmp+0x38>
 9ca:	0a 26       	eor	r0, r26
 9cc:	61 f0       	breq	.+24     	; 0x9e6 <__fp_cmp+0x46>
 9ce:	23 2b       	or	r18, r19
 9d0:	24 2b       	or	r18, r20
 9d2:	25 2b       	or	r18, r21
 9d4:	21 f4       	brne	.+8      	; 0x9de <__fp_cmp+0x3e>
 9d6:	08 95       	ret
 9d8:	0a 26       	eor	r0, r26
 9da:	09 f4       	brne	.+2      	; 0x9de <__fp_cmp+0x3e>
 9dc:	a1 40       	sbci	r26, 0x01	; 1
 9de:	a6 95       	lsr	r26
 9e0:	8f ef       	ldi	r24, 0xFF	; 255
 9e2:	81 1d       	adc	r24, r1
 9e4:	81 1d       	adc	r24, r1
 9e6:	08 95       	ret

000009e8 <__eerd_byte_m88p>:
 9e8:	f9 99       	sbic	0x1f, 1	; 31
 9ea:	fe cf       	rjmp	.-4      	; 0x9e8 <__eerd_byte_m88p>
 9ec:	92 bd       	out	0x22, r25	; 34
 9ee:	81 bd       	out	0x21, r24	; 33
 9f0:	f8 9a       	sbi	0x1f, 0	; 31
 9f2:	99 27       	eor	r25, r25
 9f4:	80 b5       	in	r24, 0x20	; 32
 9f6:	08 95       	ret

000009f8 <__eewr_byte_m88p>:
 9f8:	26 2f       	mov	r18, r22

000009fa <__eewr_r18_m88p>:
 9fa:	f9 99       	sbic	0x1f, 1	; 31
 9fc:	fe cf       	rjmp	.-4      	; 0x9fa <__eewr_r18_m88p>
 9fe:	1f ba       	out	0x1f, r1	; 31
 a00:	92 bd       	out	0x22, r25	; 34
 a02:	81 bd       	out	0x21, r24	; 33
 a04:	20 bd       	out	0x20, r18	; 32
 a06:	0f b6       	in	r0, 0x3f	; 63
 a08:	f8 94       	cli
 a0a:	fa 9a       	sbi	0x1f, 2	; 31
 a0c:	f9 9a       	sbi	0x1f, 1	; 31
 a0e:	0f be       	out	0x3f, r0	; 63
 a10:	01 96       	adiw	r24, 0x01	; 1
 a12:	08 95       	ret

00000a14 <_exit>:
 a14:	f8 94       	cli

00000a16 <__stop_program>:
 a16:	ff cf       	rjmp	.-2      	; 0xa16 <__stop_program>
